day04 (java 2일차)
목표 -> 복습 -> 자료형과 변수 -> 제어문자, 출력메소드, 서식문자 -> 형변환

세로로 작성
이름 맨 윗줄 왼쪽에 작성
1. 자격증
취득한 자격증 : 
목표하는 자격증 : 

- 정보처리기사, 정보처리 산업기사, 정보처리 기능사
- 정보보안기사, 정보보안 산업기사
- 리눅스 마스터 2급, 네트워크 관리사 2급
- SQLD 
- PCCP / PCCE(프로그래머스 인증시험) - 코딩필수역량인증시험

2. 취업 목표 일정(수료후 바로 OR 수료후 1개월 내, 수료후 2개월 내, 수료후 3개월 내)

3. 취업 직무(개발 / 보안 / 보안솔루션)

4. 이번 달의 목표

* 9시 30분까지 작성

-------------------------------------------------------------------------------------------------------------
0. 복습
컴퓨터 = 하드웨어 + 운영체제(os) + 소프트웨어
컴퓨터 언어 : 저급언어, 고급언어
번역프로그램 : 컴파일러, 인터프리터

.java 파일 -----------> .class ----------> 실행결과
	  javac.exe		java.exe

java 프로젝트 -> 패키지 -> 클래스 -> main 메소드

jvm, jre, jdk
JVM(Java Virtural Machine)
	운영체제 맞춰서 java로 만든 프로그램 실행시켜준다

JRE(java Runtime Enviromnet)
	JVM을 실행한다
	JVM을 실행 할 때 필요한 라이브러리 파일 등을 가지고 있다

JDK(Java Development Kit)
	JRE을 포함한다
	JRE 외에 개발에 필요한 도구들을 가지고 있다

단축키
	ctrl + n 프로젝트, 패키지, 클래스 생성
	alt + v, 클래스 파일의 {} 영역 안에서 main + ctal + space bar 엔터 : 메인 메소드 생성
	syso + ctrl + space bar 엔터 : 출력 메소드 생성
	ctrl + F11 : 실행
	ctrl + s : 저장
	ctrl + alt + 방향키 위, 아래 : 라인 한 줄 복사
	alt + 방향키 위, 아래 : 라인 한 줄 이동
	F2 : 파일명, 패키지명, 프로젝트명, 변경
	ctal + shift + f : 자동 정렬

용어정리
- 자바프로젝트
	하나의 프로그램 단위
	프로그램을 구성하는 것들을 모아둔 폴더

- 패키지
	소스파일들의 묶음 단위
	프로젝트의 하위 폴더

- 소스파일
	.java로 끝나는 파일이며 소스코드가 작성된다
	이클립스에서는 클래스를 생성하면 자동으로 클래스와 같은 이름으로 소스파일을 만들어준다

- 클래스
	자바에서 모든 코드는 클래스 내부에서 작성된다
	클래스 이름 첫글자를 대문자로 작성해야 한다

- 중괄호 {}
	영역을 표시한다

- 메소드
	이름뒤에 소괄호()가 있는 대부분의 명령하는 메소드 이다
	키워드 뒤에 ()가 있는 명령어는 메소드가 아니다(ex: for(){})

- 메인 메소드
	자바프로그램이 실행되면 메인 메소드의 코드가 실행된다
	프로그램이 시작되는 시작점(entry point)

- 출력 메소드
	System.out.println("민경승");
	콘솔창에 소괄호 안에 있는 것(값)을 출력한다

- 콘솔창
	입력과 출력이 가능한 창
	컴퓨터와 개발자가 의사소통할 수 있는 장
	개발자가 제대로 된 코드를 작성했는지 확인하기 위해서 사용한다

- .(닷 연산자, 하위 연산자)
	.
	~ 안에 라고 해석한다

- 세미콜론;
	문장의 끝을 표시한다

- 들여쓰기
	자바에서는 들여쓰기가 코드에 영향을 키치지 않는다
	가독성을 높이기 위해 사용한다

- 주석
	코드에 영향을 끼치지 않는다
	내가 쓴 코드를 다른 사람에게 설명하기 위한 설명글
	잠시 일부 코드를 제외하고 실행시켜야 할 때
	★ 자바 배울 동안은 주석을 통해 코드해석, 로직구성을 필수로 진행한다!
	한줄 주석 //, 범위주석 /* */, api주석 /** */

-------------------------------------------------------------------------------------------------------------

package review;

public class Test01 {
   public static void main(String[] args) {
      
   }
}

-------------------------------------------------------------------------------------------------------------

package review;

public class Test01 {   // 클래스의 중괄호 시작영역
   public static void main(String[] args) { //메인 메소드의 중괄호 시작 영역
      
      System.out.println("2025년 6월 16일 월요일"); //2025년 6월 16일 월요일이라는 값을 콘솔창에 출력하고 줄바꿈한다
      System.out.println("4일차 수업"); //4일차 수업이라는 값을 콘솔창에 출력하고 줄바꿈한다
      System.out.println("2교시 수업중"); //2교시 수업중이라는 값을 콘솔창에 출력하고 줄바꿈한다
      //ctrl + shift + - or + 크기 조절 단축키
      System.out.println("2025년 6월 16일 월요일"); //2025년 6월 16일 월요일이라는 값을 콘솔창에 출력하고 줄바꿈한다
      System.out.println("4일차 수업

package review;

public class Test01 {   // 클래스의 중괄호 시작영역
   public static void main(String[] args) { //메인 메소드의 중괄호 시작 영역
      
      System.out.println("2025년 6월 16일 월요일"); //2025년 6월 16일 월요일이라는 값을 콘솔창에 출력하고 줄바꿈한다
      System.out.println("4일차 수업"); //4일차 수업이라는 값을 콘솔창에 출력하고 줄바꿈한다
      System.out.println("2교시 수업중"); //2교시 수업중이라는 값을 콘솔창에 출력하고 줄바꿈한다
      //ctrl + shift + - or + 크기 조절 단축키
      System.out.println("2025년 6월 16일 월요일"); //2025년 6월 16일 월요일이라는 값을 콘솔창에 출력하고 줄바꿈한다
      System.out.println("4일차 수업"); //4일차 수업이라는 값을 콘솔창에 출력하고 줄바꿈한다
      System.out.println("4일차 수업"); //4일차 수업이라는 값을 콘솔창에 출력하고 줄바꿈한다
      
      System.out.println(1 + 1);
      System.out.println("1 + 1");
      System.out.println(2);
      System.out.println(3);
      System.out.println(4);
   } // 메인 메소드의 중괄호 끝 영역
}    // 클래스의 중괄호 끝 영역

-------------------------------------------------------------------------------------------------------------

1. 자료형(Type) : 값의 종류
	자료형	type	byte	값의 의미			예시
	정수형	int	4byte	양의정수, 음의정수, 0	2, -15, -5555, 0, ..
		long 	8	양의정수, 음의정수, 0	2L, -15L, 0L, ...
	실수형	double	8	소수점이 있는 수		3.14, 5.1, -66.34, 0.0, ..
		float	4	소수점이 있는 수		3.14f, -5.1f, 0.0f, ..
	논리형	boolean	1	참, 거짓			true, false
	문자형	char	2	문자 1개('')		'a', 'A', '가', '0', ..
	문자열	String	?	문자들의 나열("")		"a", "민경승", "2025 6월 16일", ...

bit(비트)
	컴퓨터가 처리 할 수 있는 최소의 데이터 단위
	0, 1

byte
	bit 8개를 묶어서 1byte

문자
	작은 따옴표로 감싸진 1개의 문자

문자열
	문자들의 나열
	큰 따옴표로 감싸진 0개 이상의 문자

2. 변수(Variable)
	어떤 값을 저장하기 위한 저장 공간

1) 변수의 특징
	변수는 오직 하나의 자료형만 저장 할 수 있다
	변수는 오직 하나의 값만 저장 할 수 있다

	=> 하나의 자료형과 하나의 값만 저장 할 수 있는 저장공간

2) 변수의 선언과 사용
	변수의 선언(만든다)
		자료형 변수명;
		int number;
		boolean isTrue;
		char alpha;

	변수에 값을 저장
		변수명 = 값;
		number = 100;
		isTrue = true;
		alpha = 'a';
		
		=(대입연산자)	오른쪽의 값을 왼쪽의 저장공간에 저장한다/대입한다



-------------------------------------------------------------------------------------------------------------

package variable;

// 1번 : 변수선언
public class Variable01 {
   public static void main(String[] args) {
      // 변수선언
      // 자료형 변수명;
      int number1; // 정수형 타입의 값을 저장할 수 있는 number1 변수를 만들었다
      boolean isTrue; // 논리형 타입의 값을 저장할 수 있는 isTrue 변수를 만들었다
      double number2; // 실수형 타입의 값을 저장할 수 있는 number2 변수를 만들었다

      // 변수에 값 저장(변수를 선언 후 값을 저장해야한다!!)
      // 변수명 = 값;
      number1 = 10; // 10이라는 정수형 값을 number1 변수에(저장공간) 대입한다
      isTrue = true; // true라는 논리형 값을 isTrue 변수에 대입한다
      number2 = 3.14; // 3.14라는 실수형 값을 number2 변수에 대입한다

      // 출력
      System.out.println(10); // 10이라는 정수값을 콘솔창에 출력한다
      System.out.println(number1); // number1이라는 변수에 저장된 10이라는 정수형 값을 콘솔창에 출력한다
      System.out.println(number2); // number2라는 변수에 저장된 3.14라는 실수형 값을 콘솔창에 출력한다
      System.out.println(isTrue); // isTrue라는 변수에 저장된 true라는 논리형 값을 콘솔창에 출력한다

      // 변수 선언과 동시에 초기화(처음으로 값을 저장하는 것)
      // 자료형 변수명 = 값;
      int number3 = 100; // 정수를 저장할 수 있는 변수 number3를 선언하고 100이라는 정수형 값으로 초기화했다(저장했다)
      // int number3;
      // number3 = 100;
      System.out.println(number3);
      //ctrl + shift + f : 자동정렬 단축키
   }
}

-------------------------------------------------------------------------------------------------------------

변수 선언과 동시에 초기화
	자료형 변수명 = 값;
	int number = 100;


-------------------------------------------------------------------------------------------------------------

package variable;
//2번 : 여러개 변수 선언
public class Variable02 { //클래스 중괄호 영역 시작
   public static void main(String[] args) { //main 메소드 중괄호영역 시작
      //여러개의 변수를 선언하기
      int num1 = 10;
      int num2 = 20; //정수형 num2 변수선언후 20이라는 정수형 값을 대입
      int num3 = 30;
      System.out.println(num1);
      System.out.println(num2); //num2 변수에 저장된 정수형 값을 출력하고 줄바꿈한다
      System.out.println(num3);
      System.out.println(num1 + num2 + num3); //정수형은 덧셈연산결과 확인이 가능하다
      
      int num4 = 10, num5 = 20, num6 = 30;
      //정수형 변수 num4에 10이라는 정수형값을 저장, num5에 20이라는 정수형값 저장, num6에 30이라는 정수형값을 저장한다
      //여러개의 변수를 선언 시 같은 타입이라면 ,를 이용해서 여러개 선언할 수 있다
      
//      int num4 = 10;
//      int num5 = 20;
//      int num6 = 30;
      System.out.println(num4);
      System.out.println(num5);
      System.out.println(num6);
      
      
   } //main 메소드 중괄호 영역 끝
} //클래스 중괄호 영역 끝


변수에 저장된 값을 사용하는 방법
	변수명을 이용한다

여러개의 변수를 선언하는 방법
	자료형 변수명1, 변수명2, 변수명3,
	자료형 변수명1 = 값, 변수명2 = 값, 변수명3 = 값;
	단, 자료형이 같아야한 한다

3) 변수 선언 시 주의사항
	같은 영역에서(중괄호 안) 같은 이름의 변수를 선언 할 수 없다
	되도록 소스코드 위쪽에 한꺼번에 선언한다
	되도록 선언과 동시에 초기화를 한다
	(어떤 값으로 초기화 해야할 지 모를 때 정수형 0, 실수형 0.0, 문자열 "", 문자형 '', 논리형 false)

4) 변수명 주의사항
	문자부터 시작한다
	특수기호를 쓸 수 없다(단, _와 $만 가능)
	공백을 사용할 수 없다(카멜표기법, 스네이크 표기법 등을 활용한다)
	키워드(예약어)를 사용할 수 없다
	되도록 소문자로 시작한다(대소문자를 구분한다)
	되도록 의미있는 단어, 문자를 사용한다
	되도록 한글은 사용하지 않는다

-------------------------------------------------------------------------------------------------------------

package variable;

//3번 : 변수명 선언시 주의사항
public class Variable03 {
   public static void main(String[] args) {

      // 1) 문자부터 시작한다
//      int 1num = 10; //숫자부터 시작시 오류 발생
      int num1 = 10;
      int nu1m = 10;
//      int num1 = 100; //같은 영역 내에서 같은 이름의 변수 선언시 오류발생

      // 2) 특수문자를 쓸 수 없다(단, _와 $는 가능)
//      int @#$%^& = 100; //특수기호로 선언시 오류발생
      int a$b_ = 100;
      int _ab$ = 100; // 가능하지만 1) 문자부터 시작한다를 생각한다!!
      System.out.println(a$b_);

      // 3) 공백을 사용할 수 없다(카멜표기법, 스네이크표기법, 파스칼표기법 등을 활용한다)
//      String user name = "김영선";
      String userName = "김영선";
      // 첫단어 소문자로 시작, 단어가 바뀔 때 첫문자를 대문자로 작성(카멜표기법, 변수명/메소드명 작성시)
      String user_name = "김영선";
      // 첫단어 소문자로 시작, 단어가 바뀔 때 언더바로 연결해서 작성(스네이크 표기법, 상수 작성시)
      String UserName = "김영선";
      // 첫단어의 첫문자를 대문자로 시작, 단어가 바뀔 때 첫문자를 대문자로 작성(파스칼표기법, 클래스명 작성시)

      // 4) 키워드(예약어) 사용할 수 없다
//      int int = 10;
//      int for = 10;
//      int public = 10;

      // 5) 되도록 소문자로 시작한다(대소문자를 구분)
      int Abc = 100;
      int abc = 200;
      System.out.println(Abc);
      System.out.println(abc);

      // name, age, data, number, num1, ..
   }
}

-------------------------------------------------------------------------------------------------------------

3. 상수 (constant)
	한 번 값이 지정되면 변경할 수 없는 데이터를 의미한다
	final 키워드를 사용하여 상수를 선언한다

1) 상수 선언
	자료형 변수명 = 값; 	//변수 선언(카멜표기법)
	final 자료명 상수명 = 값; // 상수 선언
	상수명은 대문자로 작성하고 단어가 바뀔 때는_로 연결한다(스네이크 표기법)

2) 상수 사용시 주의사항
	- 이름 작성 규칙(변수명)
	- 초기화 필수 : final 키워드를 사용시 선언과 동시에 초기화해야한다
	- 불변성 : 한 번 값이 지정되면 변경할 수 없으므로 값을 유지해야할 때 주로 사용한다

-------------------------------------------------------------------------------------------------------------

package variable;

//5번 : 변수와 상수의 차이
public class Variable04 {
   public static void main(String[] args) {
      // 변수 선언
      // 자료형 변수명 = 값;

      // 상수 선언
      // final 자료형 변수명 = 값;

      // student라는 변수에 20이라는 값을 저장한다
      int student = 20;

      // MAX_STUDENT라는 상수에 25라는 값을 저장한다
      final int MAX_STUDENT = 25;

      // 출력
      System.out.println(student);
      System.out.println(MAX_STUDENT);

      // 변수에 저장되어있는 값 변경
      student = 25;
      System.out.println(student);

      // 상수에 저장되어있는 값 변경 불가
//      MAX_STUDENT = 20;

   }
}


4. 변수를 사용하는 이유(값을 왜 변수에 저장해서 사용하는가?)
	반복되는 값을 쉽게 관리하기 위해서 (값을 재사용하기 위함)
	값에 의미를 부여하기 위해서 (값에 이름을 붙여준다)
	프로그램의 가독성, 유지보수성, 재사용성을 높이기 위해서

5. 메모리
	java에서는 JVM이 관리하는 메모리영역을 할당받아 사용한다

	프로그램		JAVA프로그램
	프로그램(SW)	프로그램(SW)	
				JVM
	OS		OS
	HW		HW

------------
RAM
------------
Stack
Heap
Method

RAM
	int num;
	num = 10;
	num이라는 이름의 저장공간이 RAM에 할당된다

주소값
	메모리(RAM) 저장공간이 할당되면 고유한 값인 주소값이 부여된다

<쉽게 비유>
	RAM : 작업 도구를 올려두는 책상
		프로그램이 실행되는 동안 데이터를 저장하고 사용하는 공간
	변수 : 책상 위에 상자
		데이터를 저장하기 위해 RAM에 만든 이름이 붙은 공간
	주소값 : 상자의 위치
		컴퓨터가 RAM에서 변수를 찾을 때 사용하는 고유한 번호

6. 제어문자(Escape Character / Sequence)
	따음표 안에서 사용되며 미리 예약된 특수한 기능을 하는 문자
	\ (백슬래쉬, 역슬래쉬)를 사용한다

	\n : 줄바꿈
	\t : 일정 간격을 띄어준다(tap)
	\" : 문자열 안에서 큰 따옴표를 표현
	\' : 문자열안에서 작은 따옴표를 표현
	\\ : 문자열안에서 역슬레쉬를 표현

-------------------------------------------------------------------------------------------------------------

package variable;
//6번 : 변수를 사용하는 이유
public class Variable05 {
   public static void main(String[] args) {
      //1) 반복되는 값을 쉽게 관리하기 위해서(값을 재사용하기 위함)
      //같은 값을 여러곳에서 사용하거나 변경해야할 때 변수에 저장하면 코드 수정이 간편해진다
      //변수값을 변경하면 해당 변수를 참조하는 모든 코드에 변경사항이 자동으로 적용된다
      
      int price = 100, quantity = 5;
      System.out.println("가격 : " + price);
      System.out.println("수량 : " + quantity);
      System.out.println("총 가격 : " + (price * quantity));
      
      price = 200;
      System.out.println("가격 : " + price);
      System.out.println("수량 : " + quantity);
      System.out.println("총 가격 : " + (price * quantity));
      
      //2) 값에 의미를 부여하기 위해서(값에 이름을 붙여준다)
      // 변수에 이름을 붙이면 코드의 의미를 명확히 전달할 수 있다
      // 문자열이나 숫자를 직접 사용하는 것보다 변수명을 통해 코드의 목적을 쉽게 이해할 수 있다
      
      int userAge = 20;
      final double PI = 3.141592;
      boolean isStudent = false;
      
      System.out.println("사용자 나이 : " + userAge);
      System.out.println("원주율 값 : " + PI);
      System.out.println("학생입니까? " + isStudent);
      //문자열 + 변수명(값) => 연결되어 출력된다
      
      //3) 프로그램의 가독성, 유지보수성, 재사용을 높이기 위해서
      // 코드에서 직접 값을 사용하는 매직넘버를 피하고 변수를 사용하면 수정과 유지보수가 용이하다
      
      int number;   //RAM에서 상자를 만들고 그 상자의 이름을 number로 지정
      number = 10; // number. 상자에 10이라는 정수형 값을 저장, 이 number 상자는 RAM에서 특정 주소값을 가진다
      System.out.println(number);
      //컴퓨터는 number의 주소값을 보고 RAM에서 데이터를 읽어온다
      //주소값에 있는 데이터를 출력된다
      
      
   }
}

-------------------------------------------------------------------------------------------------------------

package print;

//7번 : 이스케이프 문자
public class EscapeCharacter {
   public static void main(String[] args) {
      // 이스케이프문자는 문자열 안에서 \를 이용해 작성한다
      // "\n" "\t" "\'" "\"" "\\"를 표현한다

      // 줄바꿈 : \n
      System.out.println("안녕하세요.\n4일차 수업중입니다.\n");
      System.out.println("지금은\n이스케이프 문자\n배우는 중입니다.");

      // 탭 간격 : \t
      System.out.println("이름 : 김영선, 나이 : 20살");
      System.out.println("이름 : 김영선\t나이 : 20살");
      System.out.println("자바는 정말 재미있다. 자바 2일차!");
      System.out.println("자바는 정말 재미있다.\t\t자바 2일차!");

      // 문자열 안에서 작은따옴표, 큰따옴표 표현 : \', \"
      System.out.println("오늘 날씨는 \"흐림\"입니다.");
      System.out.println("오늘 날씨는 \'비\'가 옵니다.");

      // 역슬래쉬 : \\
      System.out.println("워크스페이스 경로는 D:\\web_0900_ksy입니다.");

      // 복합사용
      System.out.println("문자열 안에서 다양한 제어문자를 표현할 수 있다.\n\"\\n\"을 쓰면 줄바꿈이 된다." + "\n\t\'\\t\'을 쓰면 탭키가 적용된다.");

   }
}

-------------------------------------------------------------------------------------------------------------

7. 출력 메소드
	소괄호 안에 있는 값을 콘솔창에 출력한다
	println()
		소괄호 안에 있는 값을 출력하고 줄바꿈이 된다
	print()
		소괄호 안에 있는 값을 출력하고 줄바꿈이 되지 않는다
	printf()
		형식(서식 format)에 맞는 값을 출력하고 줄바꿈이 되지 않는다


- 출력 메소드의 목적
	개발자가 오류를 해결하기 위해 값을 확인할 때 사용한다

package print;

public class PrintTest01 {
   public static void main(String[] args) {
      //println() : 소괄호 안에 있는 값을 콘솔창에 출력하고 줄바꿈된다
      System.out.println("\"println()\"는 출력메소드이다.");
      System.out.println("자동으로 줄바꿈된다\n");
      
      //print() : 소괄호 안에 있는 값을 콘솔창에 출력하고 줄바꿈 되지 않는다
      System.out.print("\'print()\'도 출력메소드이다.");
      System.out.print("자동으로 줄바꿈되지 않는다.");
      
      System.out.println("java 수업중입니다.");
      System.out.println("지금은 3시 11분입니다.");
   }
}

-------------------------------------------------------------------------------------------------------------

2) 형식 지정자
	printf()	형식지정자를 사용하여 데이터를 특정 형식으로 출력할 수 있다
			줄바꿈은 자동으로 이루어지지 않으며 필요하면 \n을 추가해서 사용한다

	출력 형식을 지정한다
	%로 시작하며 printf()에서만 사용가능하다
	반드시 따옴표 안에서 작성한다 ,(콤마) 뒤에 나오는 값이 지정자의 위치로 대입된다(들어가게된다)

	자료형	형식지정자		의미
	int	%d		decimal(10진수 정수)
		%o		octal(8진수 정수)
		%x		haxadecimal(16진수 정수)
	double	%f		float(실수)
	char	%c		character(문자)
	String	%s		String(문자열, 논리형)

3) 서식문자의 옵션
	%[- or 0][n][.m]서식문자

	-	왼쪽정렬
	0	비어있는 공간을 0으로 채움(int, double만 가능)
	n	자리수
	.m	소수점 아래 자리수 / 문자열 자르기

package print;

//9번 : printf() 출력메소드
public class PrintTest02 {
   public static void main(String[] args) {

//      String name = "김영선";
//      int age = 20;
//      System.out.println("제 이름은 김영선이고, 나이는 20살 입니다.");
//      System.out.println("제 이름은 " + name + "이고, 나이는 " + age + "살 입니다.");
//      System.out.printf("제 이름은 %s이고, 나이는 %d살 입니다.", name, age);

      // 정수형
      int num1 = 200;
      System.out.printf("10진수 : %d\n", num1);
      System.out.printf("10진수 : %d\n", 10);
      System.out.printf("8진수 : %o\n", 8);
      System.out.printf("16진수 : %x", 16); // 16진수는 10 A, 11 B, .. 15 F, 16 => 10

      // 실수형
      System.out.printf("\n실수형 : %f\n", 3.123456589);
      // float 타입 => 소수점이하 6자리까지 정확하게 나옴, 7자리이상이면 7번째 자리에서 반올림
      System.out.printf("실수형 2자리까지 표현 : %.2f\n", 3.12345);

      // 문자형
      System.out.printf("\n문자형 : %c", 'a');

      // 문자열
      System.out.printf("\n문자열 : %s\n", "hello");
      String data = "hello, java";
      System.out.println(data);
      System.out.printf("문자열 : %.5s", data);
      
      //논리형(형식지정자 x)
      System.out.printf("\n논리형 : %s", true);
      System.out.printf("\n논리형 : %.1s", true);

   }
}

-------------------------------------------------------------------------------------------------------------

package print;

//10번 : 서식문자의 옵션   printf()
public class PrintTest03 {
   public static void main(String[] args) {
      System.out.println("======================");
      // 기본 형식지정자
//      System.out.printf("이름 : %s, 나이 : %d\n", "김영선", 20);
//      System.out.printf("%d.%.2f 날씨 : %s\n", 2025, 6.16, "흐림");
//      System.out.printf("%s %c", true, 'a');

      // 자리수를 지정한 출력
      System.out.println("======================");
      // %[왼쪽 - or 0][n][.m]서식문자
      String subject = "java";
      System.out.printf("%s", subject);

   }
}

-------------------------------------------------------------------------------------------------------------

package print;

//10번 : 서식문자의 옵션   printf()
public class PrintTest03 {
   public static void main(String[] args) {
      System.out.println("======================");
      // 기본 형식지정자
//      System.out.printf("이름 : %s, 나이 : %d\n", "김영선", 20);
//      System.out.printf("%d.%.2f 날씨 : %s\n", 2025, 6.16, "흐림");
//      System.out.printf("%s %c", true, 'a');

      // 자리수를 지정한 출력
      System.out.println("======================");
      // %[왼쪽 - or 0][n][.m]서식문자
      String subject = "java";
      System.out.printf("%10s\n", subject); //10자리 기준 오른쪽 정렬
      System.out.printf("%-10s\n", subject); //10자리 기준 왼쪽 정렬
      System.out.printf("%10s %05d\n", subject, 500);
      System.out.printf("%5s", "김영선");
      
      //상품명과 가격정렬
      System.out.println("\n\n===========메뉴=============");
      System.out.printf("%-5s\t\t%5d원", "꼬북칩", 2500);
      System.out.printf("\n%-5s\t\t%5d원", "누네띠네", 3000);
      System.out.printf("\n%-5s\t\t%5d원", "껌", 800);
      
   }
}

-------------------------------------------------------------------------------------------------------------

8. 형변환(Type Casting)
1) 자동형변환(Implict Casting)
	자바 컴파일러가 자동으로 수행하는 형변환

	작은 byte의 값을 큰 byte의 변수에 저장하면 자동으로 형 변환된다
	정수 + 정수 = 정수	
	정수 + 실수 = 실수
	문자는 정수로 자동 형변환된다

2) 강제형변환(Explicit Casting)
	큰 타입을 작은 타입으로 개발자가 명시적으로 변환하는 형변환
	데이터 손실이 발생할 수 있기 때문에 캐스팅 연산자를 사용

	(자료형)값

+) java의 기본자료형
	정수형	int		4byte
		long		8byte
	실수형	doblule		8byte
		float		4byte
	논리형 	boolean		1byte(1bit)
	문자형	char		2byte
	문자열	String		?

+) 형변환 가능성
숫자형 자동 변환
	byte -> short -> int - long -> float -> double
			↑
			char

	char과 int는 유니코드 숫자로 변환(자동형변환 가능)

+) 형변환 가능성
	byte	short	char	int	long	float	double	boolean
byte	o	o	x	o	o	o	o	x
short	x	o	x	o	o	o	o	x
char	x	x	o	o	o	o	o	x
int	x	x	x	o	o	o	o	x
long	x	x	x	x	o	o	o	x
float	x	x	x	x	x	o	o	x
double	x	x	x	x	x	x	o	x
boolean	x	x	x	x	x	x	x	o

-------------------------------------------------------------------------------------------------------------

package typeCasting;
//13번 : 모든 데이터 타입 조합
public class TypeCastingTest03 {
   public static void main(String[] args) {
      //변수
      byte b = 10;
      short s = 100;
      char c = 'a'; //97
      int i = 1000;
      long l = 10000L;
      float f = 3.14f;
      double d = 3.141592;
      boolean bool = true;
      
      //byte
      System.out.println("=========byte========");
      System.out.println("byte 타입의 값 : " + b);
      short bs = b;
//      char bc = b;
      int bi = b;
      long bl = b;
      double bd = b;
      float bf = b;
//      boolean bb = b;
      
      //short
      System.out.println("\n=========short========");
//      byte sb = s; 자동형변환 불가(short -> byte)
      short ss = s;
//      char sc = s;
      int si = s;
      long sl = s;
      double sd = s;
      float sf = s;
//      boolean sb = s;
      
      //char
      System.out.println("\n=========char========");
      int ci = c;
      System.out.println(c);
      System.out.println(ci);
      long cl = c;
      float cf = c;
      double cd = c;
      short cs = (short)c; //강제형변환 가능
      byte cb = (byte)c; //강제형변환 가능
      
      //int
      System.out.println("\n=========int========");
      i = 100000;
      long il = i;
      float i_f = i;
      double id = i;
      byte ib = (byte)i;
      char ic = (char)i;
      System.out.println(i);
      System.out.println(ic);
      
      //long
      System.out.println("\n=========long========");
      float lf = l;
      double ld = l;
      int li = (int)l; //강제형변환 가능
      
      //float
      System.out.println("\n=========float========");
      double fd = f;
      int fi = (int)f; //강제형변환 가능
      
      //double
      System.out.println("\n=========double========");
      float df = (float)d; //강제형변환 가능
      int di = (int)d; //강제형변환 가능
      
      //boolean
//      int bi2 = (int)bool;
      
      
   }
}

-------------------------------------------------------------------------------------------------------------

package typeCasting;

//11번 : 자동 형변환
public class TypeCasting01 {
   public static void main(String[] args) {
      // 1) 작은 자료형의 값을 큰 자료형으로 변환
      // int(4byte) -> long(8byte)
      int iVal = 100;
      long result1 = iVal; // int형 값 100을 long타입 변수에 대입(자동형변환)
      System.out.println(iVal);
      System.out.println(result1);

//      long lVal = 100;

      // int(4byte) -> float(4byte)
      float result2 = iVal;
      System.out.println(result2);

      // int(4byte) -> double(8byte)
      double result3 = iVal;
      System.out.println(result3);

      // double(8byte) -> long(8byte)
//      long result4 = result3;
      // result3은 100.0 실수 타입으로 정수형 변수에 담길 경우 소수점의 손실이 발생하므로 자동형변환 불가능

      // float(4byte) -> double(8byte)
      double result4 = result2;
//      float result5 = result3;
      // double 타입의 값은 float 타입에 담을 수 없다. 소수점의 손실이 발생하기 때문
      // double 타입 : 소수점 이하 15자리까지, float 타입 : 소수점 이하 6자리까지

      // 2) 연산시 자동 형변환
      // 정수와 실수의 연산
      int iVal2 = 10;
      double dVal2 = 3.14;
      System.out.println(iVal2 + dVal2);
      double result6 = iVal2 + dVal2;
      System.out.println(result6);

      // 3) 문자형에서 정수형으로 변환
      char letter = 'a';
      int ascii = letter;
      System.out.println(letter);
      System.out.println(ascii);

      char letter2 = 'b';
      int ascii2 = letter2;
      System.out.println(letter2);
      System.out.println(ascii2);

      char letter3 = 'A';
      int ascii3 = letter3;
      System.out.println(letter3);
      System.out.println(ascii3);

      char letter4 = '가';
      int ascii4 = letter4;
      System.out.println(letter4);
      System.out.println(ascii4);
   }
}

-------------------------------------------------------------------------------------------------------------

package typeCasting;
//12번 : 강제형변환
public class TypeCasting02 {
   public static void main(String[] args) {
      // 형변환 연산자 (자료형)을 사용하여 강제 형변환을 한다
      // 큰 범위를 가진 자료형에서 작은 범위로 변환 시 데이터 손실이 발생할 수 있다
      // 컴파일러는 명시적인 강제 변환이 없으면 오류를 발생시킨다
      
      //1) 실수 -> 정수
      double num1 = 3.141592;
      int result1 = (int)num1;
      System.out.println(num1);
      System.out.println(result1);
      System.out.println("실수형 num1의 값 : " + num1 
            + ", 정수형으로 변환된 값 : " + result1 );
      
      //2) 큰 범위 정수 -> 작은 범위 정수
      long num2 = 10L; //8byte
      int result2 = (int)num2; //4byte
      System.out.println("long 타입 num2의 값 : " + num2 
            + ", int타입으로 변환된 값 : " + result2);
      
      //3) 범위 초과
      long num3 = 2147483648L;
      int result3 = (int) num3;
      System.out.println("long타입 num3 값 : " + num3 + ", 왜곡된 값 : " + result3);
      // 음수가 나타나는 이유(overflow의 원리)
      // int의 범위는 32bit 자료형
      // 값의 범위 -2,147,483,648 ~ 2,147,483,647
      // long에서 int로 변환 => 2147483648은 int의 범위를 초과하므로 상위비트(초과된 비트)가 잘리게된다
      // 잘린값은 2의 보수 형식으로 계산되며 음수값으로 변환된다
      // 1000 0000 0000 0000 0000 0000 0000 0000(32비트)
      
      // 값 왜곡은 작은 자료형으로 형변환시 발생할 수 있는 문제이고 강제 형변환은 값의 범위를 
      // 초과하지 않을 때만 사용해야한다
      // 필요한 경우 변환하기 전에 범위를 확인해야한다
      
   }
}


======================================================================================================
복습
1) 자료형
	정수형
		int	4byte
		long	8byte
	실수형
		double	8byte	15자리 
		float	4byte 	6자리
	논리형
		boolean 1byte	
	문자형
		char	2byte	''로 감싸진 문자1개
	문자열	
		String 	?	""로 감싸진 문자0개 이상

2) 변수
	값을 저장하기 위한 저장 공간
	자료형 변수명;
	변수명 = 값;

	자료형 변수명 = 값;

3) 상수
	변하지 않는 값을 저장하기 위한 저장 공간
	final 자료형 상수명;
	
4) 이스케이프 문자
	문자열 안에서 \로 표현한다
	\n, \t, \', \", \\

5) 출력 메소드
	println()
	print()
	printf()

- 형식지정자
	%[- or 0][n][.m]서식문자
	%d
	%o
	%x
	%f
	%c
	%s

6) 형변환
- 자동형변환
	작은 바이트의 값을 큰 바이트의 저장공간에 담을 때
	정수 + 실수 = 실수
	char는 자동 정수형으로 변환

- 강제형변환
	(자료형)값


과제
모든것에 전부 주석을 달기
src --> day04







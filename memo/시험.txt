jvm, jre, jdk
5) JVM / JRE / JDK 개념
(1) JVM(Java Virtual Machine)
	자바 바이트코드(.class)를 실행해주는 가상 머신
	java 프로그램이 실행되는 환경
	운영체제마다 다른 JVM이 존재함(Windows, Mac용 등)
	=> 클래스 로딩, 바이트 코드 해석 및 실행, 메모리 관리

(2) JRE(Java Runtome Environment)
	JVM + Java 프로그램 실행에 필요한 라이브러리/파일 묶음
	자바로 만들어진 프로그램을 실행하려면 JRE가 필요
	구성 => JVM, rt.jar(런타임클래스들), 다양한 표준 클래스 라이브러리

(3) JDK(Java Devlopment Kit)
	자바 프로그램을 개발하기 위한 도구 모음
	개발자용 패키지 -> 컴파일, 디버그, 실행 가능
	구성 => JRE 포함, 컴파일러(javac), 디버거(jab), 다양한 개발도구(jar, javadoc 등)

출력메소드, 형변환
- 출력 메소드
	System.out.println("민경승");
	콘솔창에 소괄호 안에 있는 것(값)을 출력한다

8. 형변환(Type Casting)
1) 자동형변환(Implict Casting)
	자바 컴파일러가 자동으로 수행하는 형변환

	작은 byte의 값을 큰 byte의 변수에 저장하면 자동으로 형 변환된다
	정수 + 정수 = 정수	
	정수 + 실수 = 실수
	문자는 정수로 자동 형변환된다

2) 강제형변환(Explicit Casting)
	큰 타입을 작은 타입으로 개발자가 명시적으로 변환하는 형변환
	데이터 손실이 발생할 수 있기 때문에 캐스팅 연산자를 사용

	(자료형)값

+) java의 기본자료형
	정수형	int		4byte
		long		8byte
	실수형	doblule		8byte
		float		4byte
	논리형 	boolean		1byte(1bit)
	문자형	char		2byte
	문자열	String		?

+) 형변환 가능성
숫자형 자동 변환
	byte -> short -> int - long -> float -> double
			↑
			char

	char과 int는 유니코드 숫자로 변환(자동형변환 가능)

+) 형변환 가능성
	byte	short	char	int	long	float	double	boolean
byte	o	o	x	o	o	o	o	x
short	x	o	x	o	o	o	o	x
char	x	x	o	o	o	o	o	x
int	x	x	x	o	o	o	o	x
long	x	x	x	x	o	o	o	x
float	x	x	x	x	x	o	o	x
double	x	x	x	x	x	x	o	x
boolean	x	x	x	x	x	x	x	o

객체 지향 언어(OOP : object-Oriented Programming)
	모든 것이 객체로 구성됨(클래스, 객체, 상속, 다형성, 캡슐화 등)
	유지보수와 확장성이 뛰어남

✅ 클래스: 객체를 만들기 위한 설계도 (예: 붕어빵 틀)
✅ 객체: 클래스에서 생성된 실체(인스턴스) (예: 실제 붕어빵)
✅ 상속: 기존 클래스를 확장하여 새로운 클래스를 만드는 것 (코드 재사용)
✅ 다형성: 같은 타입의 참조변수가 다양한 객체를 가리켜 다양한 동작을 수행하는 것
✅ 캡슐화: 데이터와 메서드를 하나로 묶고, 외부에서 직접 접근하지 못하게 숨기는 것 (정보 은닉)

형변환 문자열 형변환
5일차 과제 제출 기한 11시 30분

[과제 제출 기한] 매일 pm 11시 30분까지 제출
	* 코드 해석
	* 코드 작성 2문제(로직구성 필수)

OperTask01
OperTest01
OperTest02
ScannerTask02
ScannerTest03
TypeCasting02

1. 물건값과 지불 금액을 입력받아 거스름돈을 출력하기
단, 거스름돈을 1000원, 500원, 100원 짜리로 나누어 표시하세요.
클래스명 : Day05_1

[입출력예시]
물건값 : 2700
지불금액 : 5000
거스름돈은 2300원 입니다.
1000원 : 2개
500원 : 0개
100원 : 3개

2. 이름과 나이를 입력받아 내년 나이를 출력하기(nextInt() 사용금지)
클래스명 : Day05_2

[입출력예시]
이름 : 민경승
나이 : 20
홍길동님의 내년 나이는 21살입니다.
만 나이는 19살입니다.

출력안에 산술연산자 이용하여 출력하는거 주석 달기


6일차 제어문1, 반복문 문제

5. 제어문1
	반복문	특정 조건을 만족할 때까지 실행 코드를 반복 실행한다
		for문, while문, do~while문

7일차 실습 homework07, 코인노래방 빼고

[실습] 패키지 : homework07

//1 ~ 5번 클래스명 : Review01
1. 한 개의 정수를 입력받아 짝수인지 홀수인지 출력하기(삼항 연산자 이용)

2. 한개의 정수를 입력받아 양수, 음수, 0인지 출력하기(조건문)

3. 나이를 입력받아서 다음 기준으로 출력하기
   0 ~ 12   : 어린이입니다
   13 ~ 19 : 청소년입니다
   20 이상 : 성인입니다

   나이입력 : 16
   현재 나이는 16살이고 청소년입니다

4. 세 개의 정수를 입력받아 가장 작은 숫자부터 큰 숫자 순으로 정렬하여 출력하기
   단, 세 개의 정수는 모두 다른 숫자이어야한다(중복값 X)
   
   숫자 3개 입력 :  5 1 9
   정렬된 숫자 : 9 5 1

5. 사용자가 문자열을 입력받고 "X"만 입력했을 경우에만 종료 메시지 출력하고 그 외에는 입력한 문자열을 출력하기
   
//6번 클래스명 : AtmTest
6. ATM 메뉴에서 입금, 출금, 잔액조회 하기
   [조건]
   초기 잔액은 10000원으로 설정
   메뉴 선택에 따라 작업 수행
   종료시 프로그램 종료
   숫자(번호)로 입력받기

   String msg ="\nATM 기기의 메뉴 중 번호를 선택하세요."
      + "\n1. 잔액조회"
      + "\n2. 입금"
      + "\n3. 출금"
      + "\n4. 종료"
      + "\n선택 : ";
      System.out.println(msg);
   그 외의 번호 입력시 다시 선택하세요 출력 후 메뉴 보이기
   번호 입력시 해당 메시지만 출력


8일차 반복문, 배열
런타입 데이터 에리아
힙, 스택, 메소드
구구단

- 반복문은 각 요소를 순차적으로 처리할 때 사용하며, 대표적으로 for, for-each, while문이 있습니다.

- 배열은 같은 타입의 데이터를 연속적으로 저장하는 자료구조입니다.

+) Runtime Data Area : JVM이 프로그램을 실행하는 동안 사용하는 메모리 영역
	JVM의 메모리 영역은 OS(운영체제)에게 할당받은 메모리이다
	운영체제로부터 할당받은 메모리 공간 내에서 독자적으로 메모리를 관리하고 이를 여러 영역으로 나누어 사용한다
	따라서 JVM의 메모리 영역은 운영체제의 메모리 영역과는 분리되어 동작된다
	크게 5개의 영역으로 구분되며 힙영역, 스택영역, 메소드영역, 프로그램 카운터 레지스터, 네이티브 메소드 스택

- 힙영역(Heap Area)
	객체와 배열이 생성되는 메모리 공간
	**new 연산자로 생성되는 객체나 배열이 할당
	**동적 메모리 할당을 사용하기 때문에 프로그램이 실행중에 메모리의 크기를 동적으로 조정 할 수 있다

- 스택영역(Stack Area)
	메소드 호출(사용) 시에 사용하는 메모리 공간
	메소드가 호출될 때마다 스택에 새로운 프레임이 생성되며 메소드 종료시에는 해당 프레임이 제거된다
	각 쓰레드마다 별도의 스택 영역을 가지며 동시에 여러 메소드가 호출될 수 있다

- 메소드영역(Method Area)
	클래스의 정보, static 변수, 상수 등이 저장되는 메모리 공간
	메소드 영역 JVM이 시작될 때 생성되며, 모든 쓰레드가 공유한다

※ 구구단 만들기

※ twoForTest 패키지에 Gugudan01, Gugudan02, Gugudan03, Gugudan04 클래스 만들고
   2단 ~ 9단까지 구구단 만들어서 출력하기

9일차
메소드테스크 공부(이클립스)

10일차 1. 메소드 꼭 복습, 정렬 안나옴
3. 객체지향언어 4개
클래스 객체 상속 다향성

3. 객체지향언어(OOP, Object-Oriented Programming)
	프로그램을 객체로 구성하고 이 객체들 간의 상호작용을 통해 문제를 해결하는 방식

1) 캡슐화(Encapsulation)
	객체의 데이터를 보호하고 외부에서 접근할 수 있는 방법을 제한하는 개념
	객체 => 데이터를 포함한 속성과 동작을 정의하는 메소드를 하나로 묶은 것을 의미
	객체 외부에서 내부 데이터를 직접 변경하지 못하게 하고 허용된 메소드를 통해서만 데이터를 변경하거나 사용할 수 있게 한다
	데이터(필드)를 private 접근제한자를 선언하여 외부에서 직접 접근하지 못하게 하고 getter, setter 메소드를 통해서만
	필드에 접근하도록 한다

2) 다형성(Polymorphism)
	다형성을 통해 같은 이름의 메소드가 객체에 따라 다르게 동작하도록 하는 것을 의미
	메소드 오버로딩, 메소드 오버라이딩, 참조변수의 다형성

3) 상속(Inheritance)
	기존 클래스의 필드와 메소드를 자식 클래스가 물려받아 쓰는 것을 의미(상속을 지원한다)
	상속은 extends 키워드를 사용한다
	단일상속만 지원한다(한번에 하나의 부모클래스만 상속 가능)

4) 추상화(Abstraction)
	불필요한 세부 구현을 숨기고 중요한 부분만 노출하는 것을 의미

5) 클래스와 객체
	모든 데이터를 클래스의 형태로 정의하며 객체는 클래스의 인트턴스
	클래스는 객체의 설계도 역할을 하며 필드(속성)와 메소드(동작)을 정의한다

11일차
1. 생성자(이클립스 공부)
+) 메모리 구조

1. 생성자(Consturctor)
	클래스 이름 뒤에 소괄호가 있는 형태, 메소드와 비슷하지만 메소드라고 부르지 않는다
	생성자는 리턴이라는 기능이 존재하지 않는다
	객체가 생성될 때 자동으로 실행되며, 주로 클래스의 필드를 초기화하는데 사용된다
	- 생성자는 클래스 이름과 동일한 이름을 가지며, 반환값이 없는 특별한 메소드이다

1) 생성자의 특징
	클래스 이름과 동일한 이름을 사용한다
	반환타입을 명시하지 않는다(void도 사용하지 않음)
	객체를 생성 시에 new 키워드를 통해 호출되며 직접 호출할 수 없다
	생성자를 정의하지 않으면 기본생성자(매개변수가 없는 생성자)가 자동으로 추가가 된다
	- 하지만 개발자가 생성자를 하나라도 정의하면 기본 생성자는 자동으로 만들어지지 않는다

2) 기본생성자
	public 클래스명(){}
	매개변수가 없다
	클래스 선언시 자동으로 선언되며 사용자가 직접 생성자를 선언하게 되면 자동으로 만들어주지 않는다

3) this
	객체 자기자신, this는 자동으로 생성되는 변수이다
	현재 객체 자신을 참조하는 특별한 키워드
	클래스 내부에서 필드와 메소드를 가리킬 때 사용된다

- this 키워드를 사용하는 이유
	멤버변수(필드)와 지역변수나 매개변수의 이름이 동일할 때 구분
	가독성 향상
	다른 생성자 호출 및 메소드 체이닝 구현

4) 생성자 오버로딩
	하나의 클래스에 여러개의 생성자를 정의할 수 있다
	각 생성자는 매개변수의 개수, 타입, 순서가 달라야 한다

+) 메모리 구조
Method 영역
	- 모든 클래스와 static 멤버가 저장되는 영역
	- 클래스로다가 클래스를 로드할 때 해당 클래스의 메타 데이터와 함께
	  static 변수와 static 메소드가 여기에 저장된다
	- 프로그램 실행동안 유지되며 모든 객체가 공유한다

heap 영역
	- new 키워드로 생성된 객체와 그 객체의 인스턴스 변수(필드)가 저장된다
	- 객체마다 별도의 저장공간을 가진다
	- Garbage Collector(가비지 컬렉터)가 관리한다

Stack 영역
	- 메소드의 지역변수, 매개변수와 메소드 실행정보가 저장되는 영역
	- 메소드가 호출될 때 스택 프레임이 생성되고 종료되면 프레임이 제거된다

PC Register(프로그램 카운터 레지스터)
	- 각 쓰레드가 실행중인 명령어의 주소를 저장

Native Method Stack(네이티브 메소드 스택)
	- java가 아닌 네이티브 코드(C, C++ 등)로 작성된 메소드를 호출 시 사용

12일차
2. final
- 변수, 상수만 기억
4. 변수의 종류

2. final
	final 변수		상수(값변경불가)
	final 메소드	오버라이딩 불가 : (재정의 불가)
	final 클래스	상속불가

4. 변수의 종류
	종류		선언위치/특징			메모리영역		수명
	상수		final 키워드, 값 수정 불가능		상수 풀/스택	블록/클래스 종료시까지
	지역변수		메소드나 블록내에서 선언		스택				메소드 종료 시 소멸
				외부에서 접근 불가
	매개변수		메소드 선언 시 전달 값을 받기위한 변수		스택				메소드 실핼 중 유지
	인스턴스변수	클래스 내부에서 선언					힙				객체가 살아있는 동안
				객체마다 별도로 존재(객체명.인스턴스변수명)
	정적변수		static 키워드						메소드			프로그램 시작부터 종료까지
				클래스 로딩 시 하나만 생성

시험시간 2시간(범위 : 변수 ~ 상속)
개념 서술형 2문제(소문제있음-부분점수)
코드작성 3문제(로직없으면 -10점)
	로직작성 1문제(MethodTask)
	코드작성 2문제(반복문, for문, while문 = 구구단), day09~day11 내용 중 1개(메소드 의심)

내일 시험 범위 (~접근제한자 전 까지)
- 개념 2문제
- 코드 3문제
            로직구성 1문제
            이중for문 1문제 - 구구단
            ~상속까지 1문제

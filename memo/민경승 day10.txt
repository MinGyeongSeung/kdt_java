day10(java 8일차)
복습 -> 메소드2 -> 클래스1

0. 복습
1) 배열
	하나의 자료형으로 여러가지 값을 저장 할 수 있는 저장공간

2) 배열의 사용 목적
	데이터의 집합을 효율적으로 관리
	데이터의 순서를 보존하기 위한 목적
	반복문을 사용하여 배열의 요소를 처리하기 위한 목적
	메모리를 효율적으로 사용하기 위한 목적
	데이터를 정렬하거나 검색

3) 배열의 선언
	자료형[] 배열명 = {값1, 값2, ...};
	자료형[] 배열명 = new 자료형[칸수];
	자료형[] 배열명 = null;

	자료형[][] 배열명 = {{열},{행}}; -->행은동일해야 하지만 열은 다를 수가 있다
	자료형[][] 배열명 = new 자료형[행][열]

	= : 대입연산자
	null : 주소의 초기값, 모른다

4) 메소드
	어떠한 기능을 하는 코드들의 묶음
	이름뒤에 소괄호

	- 함수 : 클래스 밖에 선언되어 있는것
	- 메소드 : 클래스 안에 선언되어 있는것

5) 메소드 정의
	선언부	리턴타입 메소드명(자료형 매개변수)
	구현부	{
			실행할코드;
			return 리턴값;
		}

6) 메소드 호출
- 매개변수 x 리턴값 x
	객체명.메소드명();

- 매개변수 o 리턴값x
	객체명.메소드명(인수);

- 매개변수 x 리턴값 o
	syso(객체명.메소드명());
	리턴타입과동일한자료형 변수명 = 객체명. 메소드명();

- 매개변수 o 리턴값 o
	syso(객체명.메소드명());
	리턴타입과동일한자료형 변수명 = 객체명.메소드명(인수);

1. 메소드
1) 메소드와 메모리
	메소드는 실행되면 메모리의 Stack 영역에 메소드 실행에 필요한 저장공간이 생긴다
	그곳에 메소드 내부에서 선언한 변수(매개변수, 지역변수)들의 저장공간이 생긴다
	메소드의 코드가 모두 실행되어 종료되면 Stack영역에서 해당 메소드의 저장공간이 삭제된다(메모리 해제)
	그러면 지역변수의 저장공간이 사라지므로 지역변수는 사용이 불가능하다

2) 메소드의 사용이유
	중복된 코드 제거
	높은 재사용성
	유지보수에 유리함

3) 인수와 매개변수
	인수(Argument) : 메소드를 사용(호출)할 때 메소드의 매개변수로 전달될 값
	매개변수(Parameter) : 외부에서 전달받아 값을 저장하고 메소드 내에서 사용될 변수

	- 메소드의 인수와 매개변수는 반드시 일치하거나 자동 형변환이 가능한 타입이여야한다
	- return되는 값은 반드시 return 타입과 일치하거나 자동 형변환이 가능한 타입이어야한다

4) 메소드 오버로딩(Method Overloading)
	다형성 : 같은 코드로 다른 기능을 하는 것
	Method : 작업을 수행하는 코드 블록
	Overloading : 과부화, 너무 많이 실음이라는 의미
		프로그래밍에서는 같은 이름을 여러번 사용하는 것을 의미

	같은 이름의 메소드를 여러개 정의하는 것을 의미한다
	매개변수의 개수, 타입, 순서가 다르면 같은 이름의 메소드로 선언할 수 있다
	반환타입은 오버로딩에 영향을 주지 않는다

- 메소드 오버로딩의 조건
	리턴타입은 같아도 상관없으	
	메소드의 이름은 동일해야함
	매개변수의 개수, 순서, 타입이 달라야함

- 메소드 오버로딩 시 주의사항
	매개변수의 타입, 개수, 순서가 동일한 경우 매개변수의 이름이 다르다고 해서 오버로딩이 아니다
	리턴타입만 다르고 메소드의 이름과 매개변수가 동일한 경우에도 오버로딩이 아니다

- 메소드 오버로딩이 필요한 이유
	이름의 통일성 : 비슷한 작업을 수행하는 메소드는 같은 이름을 사용하면 직관적이다
	코드 가독성 : 여러 작업을 하나의 이름으로 처리할 수 있어 코드가 간결해진다
		(메소드 이름을 따로 기억할 필요가 없다)

- 메소드 오버로딩이 가능한 이유
	컴파일러가 메소드 호출 시 메소드 이름뿐만 아니라 매개변수의 정보를 사용해
	정확히 어떤 메소드를 호출할 지 구분하기 때문이다

	컴파일 시 메소드 이름이 다르게 지정됨
		컴파일러는 메소드의 이름과 매개변수의 정보를 합쳐서 고유한 시그니처(Method Signature)를 생성
		시그니처는 메소드명 + 매개변수의 타입과 개수로 구성

- 컴파일러가 메소드를 선택하는 과정
	매개변수의 개수 확인 : 메소드 호출 시 인수값의 개수와 일치하는 메소드를 먼저 찾는다
	매개변수의 타입 확인 : 메소드 호출 시 전달된 인수값의 타입과 일치하는 메소드를 찾는다
	타입 변환 규칙 적용 : 전달된 인수값의 타입과 정확히(완전히) 일치하는 메소드가 없을 경우,
		더 큰 타입으로 변환 가능한 메소드를 호출(작은 타입의 값은 큰 타입으로 자동 현변환이 가능하기 때문)
		int -> long, float, double순으로 자동변환 가능
		큰 타입이 호출 우선순위의 뒤에 있다

2. call by value와 call by reference
	=> 메소드 호출 시 매개변수를 전달하는 방식

1) call by value(pass by value) : 값에 의한 호출
	값을 복사하여 메소드에 전달하는 방식
	메소드 호출 시 원본값이 복사되므로 메소드 내부에서 값이 변경되어도 원본에는 영향을 미치지 않음

	메소드에 인수로 전달되는 것은 변수의 값 자체
	- 기본 데이터 타입에서 사용
	- 메소드 내부에서 값을 변경해도 원본 변수는 변경되지 않음

2) call by Reference(pass by reference) : 참조에 의한 호출
	참조를 전달하여 메소드에 직업 원본 데이터를 조작할 수 있는 방식
	메소드 호출 시 데이터의 주소(참조값)가 전달되므로, 메소드 내부에서 데이터를 변경하면 원본 데이터도 변경됨

	- 메소드 내부에서 참조된 객체를 수정하면 원본 객체도 변경됨
	- C++ 등의 언어에서 지원되며, JAVA 지원되지 않음

------------------------------------------------------------------------------------------------

			기본데이터타입				참조타입
전달방식			값 자체를 복사해서 전달			참조값(주소)를 복사하여 전달
원본 데이터 변경여부 	메소드 내부 변경이 원본에 영향없음	참조된 객체를 변경하면 원본 객체에도 영향있음
참조값 변경 여부		의미없음				참조값 자체를 변경해도 원본 참조값에는 영향없음

------------------------------------------------------------------------------------------------
+) JAVA 동작
	**JAVA는 항상 Call By Value로 동작한다
	기본 데이터 타입 : 값 자체가 복사되어 전달
	참조타입 : 객체의 참조값(주소)이 복사되어 전달되므로 객체 내부의 데이터는 수정할 수 있지만
		참조값 자체는 변경되지 않는다
	※ 참조타입의 동작이 Call By Reference처럼 보일 수 있지만 실제로는 참조값의 복사(Call By Value)이다

	기본데이터 타입 : stack 메모리에 값 자체가 저장된다
	참조타입 : stack 메모리에 참조값이 저장되고, 객체 자체는 heap메모리에 저장된다

+ 복사
	앝은 복사(Shallow Copy) : 참조값이 복사됨(**원본과 복사본이 서로 의존적)
		속도 빠름, 메모리 사용량 적음, 간단한 객체나 데이터 구조에서 사용
	
	깊은 복사(Deep Copy) : 모든 데이터가 복사됨(**원본과 복사본이 서로 독립적)
		데이터 양에 비례하여 속도 느림, 메모리 사용량 많음, 데이터 독립성이 중요

3. 객체지향언어(OOP, Object-Oriented Programming)
	프로그램을 객체로 구성하고 이 객체들 간의 상호작용을 통해 문제를 해결하는 방식

1) 캡슐화(Encapsulation)
	객체의 데이터를 보호하고 외부에서 접근할 수 있는 방법을 제한하는 개념
	객체 => 데이터를 포함한 속성과 동작을 정의하는 메소드를 하나로 묶은 것을 의미
	객체 외부에서 내부 데이터를 직접 변경하지 못하게 하고 허용된 메소드를 통해서만 데이터를 변경하거나 사용할 수 있게 한다
	데이터(필드)를 private 접근제한자를 선언하여 외부에서 직접 접근하지 못하게 하고 getter, setter 메소드를 통해서만
	필드에 접근하도록 한다

2) 다형성(Polymorphism)
	다형성을 통해 같은 이름의 메소드가 객체에 따라 다르게 동작하도록 하는 것을 의미
	메소드 오버로딩, 메소드 오버라이딩, 참조변수의 다형성

3) 상속(Inheritance)
	기존 클래스의 필드와 메소드를 자식 클래스가 물려받아 쓰는 것을 의미(상속을 지원한다)
	상속은 extends 키워드를 사용한다
	단일상속만 지원한다(한번에 하나의 부모클래스만 상속 가능)

4) 추상화(Abstraction)
	불필요한 세부 구현을 숨기고 중요한 부분만 노출하는 것을 의미

5) 클래스와 객체
	모든 데이터를 클래스의 형태로 정의하며 객체는 클래스의 인트턴스
	클래스는 객체의 설계도 역할을 하며 필드(속성)와 메소드(동작)을 정의한다

4. 클래스
	추상화된 클래스로 객체를 만들고 객체들 간의 관계를 맺어 상호작용하는 프로그램 기법
	추상화(객체모델링) : 공통적인 특징을 파악하여 하나의 묶음으로 만들어내는 것

0) 쉽게 설명
- 클래스		비슷한 특징을 가진 것들을 묶어서 만든 일종의 설계도면
		동물클래스, 사람클래스

- 클래스 안에 있는 것? 설계도면에 따라 만들어진 물건들을 위한 특징(속성, 필드)과 물건이 할 수 있는 행동(메소드)
		사람클래스 => 필드 : 이름, 나이, 폰번호, 혈액형, 주소, 주민번호, ..
			메소드 : 걸을 수 있다, 전화할 수 있다, 잘수있다, 먹을 수 있다, 공부할 수 있다, 일할 수 있다
- 속성?		이름, 나이, 핸드폰번호, ... 		=> 사람이 가진 특징
- 메소드?		걷기, 말하기, 먹기, 공부하기, ..	=> 사람이 할 수 있는 행동
- 객체?		클래스를 만들면 그 설계도면에 따라 실제 물건(객체)를 만들 수 있다
		사람클래스 => 경승 객체명을 가진 사람을 만들 수 있고, 영재 객체명을 가진 사람을 만들 수 있고
				재인 객체명을 가진 사람을 만들 수 있다
			각 사람은 자신의 특징을 가지고 있고, 행동을 할 수 있다

1) 클래스
	사용자 정의 타입으로 데이터(필드)와 기능(메소드)를 함께 묶어 관리하는 설계도이다
	클래스를 사용하면 다양한 데이터를 저장하고 관리할 수 있는 객체를 생성할 수 있다

2) 클래스의 특징
- 사용자 정의 타입이다(자료형)
	클래스를 사용하면 여러 타입, 여러 값을 저장할 수 있는 저장공간을 만들 수 있다
	클래스 안에 선언된 변수를 사용하고 싶다면 해당 클래스 타입으로 변수를 선언해야한다

	변수 : 하나의 자료형으로 하나의 값만 저장할 수 있는 저장공간
	배열 : 하나의 자료형으로 여러가지 값을 저장할 수 있는 저장공간

- 연관성 있는 저장공간과 기능을 한 곳에 모아 편하게 관리할 수 있다
	저장공간과 기능을 나누어 관리하게 되면 코드가 길어졌을 때 사용하기 불편하다
	이 때 연관성 있는 저장공간과 기능을 클래스 묶어서 관리할 수 있다

- 객체 생성하기 위한 틀, 설계도(면)
	공통되는 속성(변수, 필드)과 행위(기능, 행동, 메소드)를 한 번만 선언해 놓고 가져다 사용만 할 수 있도록 설계한다
	추상적인 것(클래스)를 구체화시키면(메모리에 생성된 것) 객체라고한다

3) 객체(Object)와 인스턴스(Instance)
	객체 : 실제 사물 또는 개념
	클래스 : 객체를 컴퓨터에 옮기기 위해 추상화 한 것, 실제 존재하는 공간이 아니며 추상적이다
	인스턴스 : 클래스를 메모리에 할당시킨 것이며 물리적으로 존재하는 공간, 구체적이다
		객체와 거의 같은 의미이지만 클래스로부터 생성된 점을 강조할 때 사용한다

4) 클래스 선언
	class 클래스명 {
		//class를 구성하는 필드와 메소드를 합쳐서 멤버라고 부른다

		필드;	//멤버변수, 전역변수

		메소드(){}; 멤버 메소드
	}

- 객체화(인스턴스화)
	객체를 만드는 작업, 추상적인 개념을 구체화 시키는 작업

	클래스명 객체명 = new 클래스명();
	클래스명 참조변수 = new 생성자();

- 객체 멤버 접근 방법
	객체명.필드명;
	객체명.메소드명()
	
	메소드 호출방법 4가지에 따라 다르다
	매개변수 x 반환값 x 	=> 	객체명.메소드명();
	매개변수 o 반환값 x		=> 	객체명.메소드명(인수);
	매개변수 x 반환값 o		=>	syso(객체명.메소드명());
					자료형 변수명 = 객체명.메소드명();
	매개변수 o 반환값 o		=>	syso(객체명.메소드명(인수));
					자료형 변수명 = 객체명.메소드명(인수);

+) 객체를 생성하고 참조변수에 저장하는 과정

   class MyClass{
      void myMethod(){}

   }

   public class Main{
      main(){
         
         MyClass refVar =    new MyClass();
         --------------      --------------
         1번         2번
               ------
               3번
      }
   }

===================================================================================

package reviwe;

import java.util.Scanner;

public class MethodTask02 {
   
   //1. 정수 1개를 받아서 짝수입니다, 홀수입니다를 반환하는 메소드
   //메소드명 : checkNum
   
   //1) 기능
   //2) 리턴타입 => void
   //3) 메소드명 => checkNum
   //4) 매개변수 => 정수형 변수1개
   //5) 실행할문장 => 삼항연산자
   //6) return => return 매개변수 % 2 == 0 ? "짝수입니다" : "홀수입니다"
   //7) 리턴타입 변경 => String
   String checkNum(int number) {
      return number % 2 == 0 ? "짝수입니다" : "홀수입니다";
   }
   
   //2. 10칸짜리 정수 배열을 받아 총합을 계산하여 반환하는 메소드
   // 메소드명 : getSum
   //1) 리턴타입 => void
   //2) 메소드명 => getSum
   //3) 매개변수 => int[] 매개변수명
   //4) 실행할문장(기능 구현) => 
   //      총합구할변수 선언
   //      for-each문(자료형 변수명 : 배열명){
   //         총합구할변수 += 변수명;
   //      }
   //5) return 총합구할변수
   //6) 리턴타입 => int

   int getSum(int[] numbers) {
      int total = 0;
      for(int num : numbers) {
         total += num;
      }
      return total;
   }
   
   //3. 문자열을 매개변수로 받아 거꾸로 뒤집어 반환하는 메소드
   //메소드명 : reverseStr
   // hello => olleh
   
   //1) char[]을 이용한 방식
   //리턴타입 => void
   //메소드명 => reverseStr1
   //매개변수 => String 1개
   //실행할문장 =>
   //   조건식(if문)   매개변수 == null
   //         { return; }
   //   int 변수1 = 매개변수명.length();
   //   문자형배열 변수2 = new char[변수1];
   //   반복문(for문) int i = 0; i < 변수1; i++
   //   {   변수1[i] = 매개변수.charAt(변수1 - 1 - i); }
   //return => 문자열변수 
   
   //매개변수 o, 리턴값 x 메소드 정의
   String resverseStr1(String str) {
//      if(str == null) {
//         return null;
//      }
      int len = str.length();
      char[] reverse = new char[len];
      String result = "";
      for(int i = 0; i < len; i++) {
         reverse[i] = str.charAt(len - 1 - i);
      }
      return new String(reverse);
   }
   
   //2) 뒤에서부터 문자를 하나씩 더해서 새로운 문자열 만드는 방식
   // 리턴타입 => void
   // 메소드명 => reverseStr2
   // 매개변수 => String str
   // 실행할 문장 => 
   //   조건문 if(str == null){ return null; }
   //   문자열 변수 선언
   //  반복문(for문) int i = str.length() -1; i >= 0; i-- 
   //      { 변수 += str.charAt(i); }
   // return => 변수
   // 리턴타입 변경 => String
   
   String reverseStr2(String str) {
      if(str == null) {
         return null;
      }
      String result ="";
      for(int i = str.length() - 1; i >= 0; i--) {
         result += str.charAt(i);
      }
      return result;
   }
   
   //3) char[] 새로 만들어서 앞뒤 바꿔서 복사하는 방식
   // 리턴타입 => void
   // 메소드명 => reverseStr3
   // 매개변수 => String str
   // 실행할 문장(기능구현)
   //      조건문if   str ==null {return null;}
   //      정수형 변수1 = str.length();
   //      문자형배열 변수2 = new char[변수1];
   //      반복문for문 int i = 0; i < 변수1; i++
   //      {   변수2 = str.charAt(변수1 - 1 - i); }
   //      String 변수3 = ""
   //      for-each
   //      for(char 변수 : 변수2){
   //         변수3 += 변수;
   //      }
   //   리턴타입 변수3; String타입으로 변경
   String reverseStr3(String str) {
      if(str == null) {
         return null;
      }
      
      int len = str.length();
      char[] reverse = new char[len];
      
      for(int i = 0; i < len; i++) {
         reverse[i] = str.charAt(len - 1 - i);
      }
      String result= "";
      for(char c : reverse) {
         result += c;
      }
      return result;
   }
   
//   //4) 메소드를 이용하는 방식
   String reverseStr4(String str) {
      return new StringBuilder(str).reverse().toString();
   }
   
   //4. 정수형 배열과 찾을 값을 매개변수로 받아서 배열에 존재하면 true 반환하는 메소드
   //메소드명 : contains
   //배열 요소 중에 10이라는 값을 반드시 넣고 10을 매개변수로 전달
   //   syso(메소드명(배열명, 10)) => true
   
   // 리턴타입 => void -> boolean
   // 메소드명 => contains
   // 매개변수 => 정수형배열 1개, 정수형변수 1개
   // 구현부{
   //      if(매개변수1 == null){
   //         return false; }
   //      for(정수형 변수 : 배열명){
   //         조건문(if문) 변수 == 정수형변수 {
   //            return true;
   //         }
   //      }
   //      return false;
   //   }
   
   boolean contains(int[] arr, int num) {
      if(arr == null) {
         return false;
      }
      for(int i : arr) {
         if(i == num) {
            return true;
         }
      }
      return false;
   }
   
   //7. 아이디와 비밀번호를 매개변수로 받아 검증, 시도횟수 3회 넘기면 잠금 반환
   //loginTry
   //리턴타입 => void => String
   //메소드명 =>  loginTry
   //매개변수 => 문자열 2개
   //구현부 => 
   //      고정값 id, pw 선언(상수)
   //      횟수 확인할 변수1 선언
   //      if문 변수1 >= 3
   //         return 계정잠금
   //      if문 상수id.equals(매개변수id) && 상수pw.equals(매개변수pw)
   //         변수1 초기화
   //         return 로그인 성공
   //      else{
   //         변수1++
   //         if(변수1 >= 3){
   //         return 계정잠금}
   //      return 로그인실패
   //      }
   //}}
   
   //메소드 밖에서 클래스 안에 변수 선언
//   int tryCount = 0;
//   
//   String loginTry(String inputId, String inputPw) {
//      final String ID = "admin";
//      final String PW = "1234";
//      System.out.println(tryCount + "번");
//      if(tryCount >= 3) {
//         return "계정잠금";
//      }
//      if(ID.equals(inputId) && PW.equals(inputPw)) {
//         tryCount = 0;
//         return "로그인 성공";
//      }else {
//         if(tryCount >= 3) {
//            return "계정잠금";
//         }
//         tryCount++;
//         System.out.println(tryCount);
//         return "로그인실패";
//      }
//   }
   
   //loginTry(검증만)
   String loginTry1(String inputId, String inputPw) {
      final String ID = "admin";
      final String PW = "admin";
      
      if(ID.equals(inputId) && PW.equals(inputPw)) {
         return "로그인성공";
      }
      return "로그인 실패";
   }
   

   public static void main(String[] args) {
      MethodTask02 mt = new MethodTask02();
      
      System.out.println("----------1번---------");
      //매개변수 o, 리턴값 o => syso(객체명.메소드명(인수));
//      System.out.println(mt.checkNum(10));
//      System.out.println(mt.checkNum(-7));
      
      System.out.println("----------2번---------");
      //매개변수 o, 리턴값 o => syso(객체명.메소드명(인수));
      
//      System.out.println(mt.getSum(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));
//      int[] numbers = {10, 20, 10, 20, 10, 20, 10, 20, 10, 20};
//      System.out.println(mt.getSum(numbers));
      
      System.out.println("----------3번-1---------");
//      System.out.println(mt.resverseStr1(null));
//      System.out.println(mt.reverseStr4("철수"));
      
      System.out.println("----------4번----------");
      int[] ar = {1, 2, 3, 10};
      System.out.println(mt.contains(null, 0));
      System.out.println(mt.contains(ar, 10));
   
      System.out.println("----------7번----------");
//      System.out.println(mt.loginTry("admin", "1234"));
//      System.out.println(mt.loginTry("admin", "12345")); //1회실패
//      System.out.println(mt.loginTry("admin", "12345")); //2회실패
//      System.out.println(mt.loginTry("admin", "12345")); //3회실패=>잠금
//      System.out.println(mt.loginTry("admin", "12345")); //3회실패=>잠금
      
      int tryCount = 0;
      String id, passwd, result;
      Scanner sc = new Scanner(System.in);
      
      while(true) {
         System.out.println("아이디 입력 : ");
         id = sc.nextLine();
         System.out.println("비밀번호 입력 : ");
         passwd = sc.nextLine();
         
         result = mt.loginTry1(id, passwd);
         
         if(result.equals("로그인 성공")) {
            System.out.println("로그인 성공");
            break;
         }else {
            tryCount++;
            if(tryCount >= 3) {
               System.out.println("3회 이상 실패로 계정 잠금");
               break;
            }
            System.out.println("로그인 실패");
         }
      }
      sc.close();
      
   }
   
   //5. 단수를 매개변수로 받아 해당 단의 구구단을(1 ~ 19)을 출력하는 메소드
   //메소드명 : printGugudan
   //   3 x 1 = 3
   //   ...
   //   3 x 19 = _
   
   //6. 두개의 문자열을 입력받아서 두 문자열의 길이가 같으면 같음, 다르면 다름 반환하는 메소드
   //메소드명 : compareLength
  
}

===================================================================================

package method;
//1번 : 메소드사용이유1(중복된 코드의 제거)
public class MethodBasic01 {
	public static void main(String[] args) {

		//동일한 작업을 수행하는 코드를 여러번 작성하는 대신 메소드로 정의하면
		//코드의 가독성과 효율성이 향상된다
		
		//동일한 로식을 여러번 작성
		System.out.println("총 합 : " + (5 + 10));
		System.out.println("총 합 : " + (1 + 2));
		System.out.println("총 합 : " + (10 + 29));
		
        MethodBasic01 m = new MethodBasic01();
        m.printSum(10, 29);
        m.printSum(5, 10);
		
	}

    //메소드를 사용한 경우
    void printSum(int num1, int num2) {
       System.out.println("num1의 값 : " + num1 + ", num2의 값 : " + num2);
       System.out.println("총 합 : " + (num1 + num2));
    }

}

===================================================================================

package method;
//2번 : 메소드 사용이유2(높은 재사용성)
public class MethodBasic02 {
	public static void main(String[] args) {

		//동일한 로직을 구현하기 위해 새롭게 코드를 작성할 필요없이
		//이미 작성된 메소드를 호출하면 된다
		//작성된 코드의 재사용성을 높일 수 있다
		
		MethodBasic02 m = new MethodBasic02();
		System.out.println("첫번째 직사각형의 면적 : " + m.calculateArea(5, 10));
		System.out.println("첫번째 직사각형의 면적 : " + m.calculateArea(500,123));
		
	}
	
	//직사각형의 넓이 구하는 메소드
	int calculateArea(int width, int height) {
		return width * height;
	}
}

===================================================================================

package method;
//3번 : 메소드 사용이유3(유지보수에 유리함)
public class MethodBasic03 {
	public static void main(String[] args) {
		// 코드의 구조를 모듈화(=부품화)함으로써 수정과 확장이 쉬워진다
		// 하나의 메소드만 변경하면 해당 메소드를 호출하는 모든 코드에 자동으로 반영되므로
		// 수정범위를 최소화 시킬 수 있다
		
		MethodBasic03 m = new MethodBasic03();
		System.out.println("메소드 이용 25의 세제곱 : " + m.calSquare(25) );
		System.out.println("메소드 이용 2의 세제곱 : " + m.calSquare(2) );
	}
	
	//거듭제곱을 구하는 메소드
	int calSquare(int num) {
		return num * num* num;
	}
	
}

===================================================================================

package method;
//4번 : stack 메모리
public class StackMethod {
   public static void main(String[] args) {
   
      //1. main메소드 실행 -> 스택에 main 스택프레임이 생성
      // 
      
      StackMethod s = new StackMethod();
      int result = s.add(10, 20);
      System.out.println(result);
      System.out.println(num1);
      
   }
   
   //두 정수의 합을 구하는 메소드
   int add(int num1, int num2) {
      System.out.println("num1의 값 : " + num1 + ", num2의 값 : " + num2);
      return num1 + num2;
   }
}


===================================================================================

package method;
//5번 : 스택오버플로우 발생
public class StackOverFlow {
   public static void main(String[] args) {
      recursiveMethod();
   }
   
   static void recursiveMethod() {
      recursiveMethod();
      // java.lang.StackOverflowError
      // 재귀 호출이나 반복적인 메소드 호출로 인해
      // 스택 프레임이 계속 쌓여서 스택영역의 크기 제한을 초과하면 발생
      // JVM이 할당한 스택영역의 최대 크기를 초과하므로 더 이상 메소드 호출 정보를 쌓을 공간이 없어서
      // StackOverflowError가 발생한다
   }
}

===================================================================================

package method;
//6번 : 메소드 오버로딩1
public class MethodOverloading01 {
   public static void main(String[] args) {
      
      MethodOverloading01 m = new MethodOverloading01();
      m.addInt(10, 20);
      m.addDouble(30.5, 1.1);
   }
   
   //메소드 오버로딩 전
   void addInt(int num1, int num2) {
      System.out.println(num1 + num2);
   }
   
   void addDouble(double num1, double num2) {
      System.out.println(num1 + num2);
   }
}

===================================================================================

package method;
//7번 : 메소드 오버로딩2
public class MethodOverloading02 {
	public static void main(String[] args) {
	
		MethodOverloading02 m = new MethodOverloading02();
		System.out.println(m.add(10, 20));
		System.out.println(m.add(1, 2, 3));
		m.add(10.5, 3);
		m.add(3.3, 4);
	}
	
	int add(int num1, int num2) {
		return num1 + num2;
	}
	
	//매개변수의 개수가 다른 add메소드
	int add(int num1, int num2, int num3) {
		return num1 + num2 + num3;
	}
	
	//매개변수의 타입이 다른 add메소드
	void add(double num1, int num2) {
		System.out.println(num1 + num2);
	}
	
	//매개변수의 순서가 다른 add메소드
	void add(int num1, double num2) {
		System.out.println(num1 + num2);
	}
	
}

===================================================================================
package method;
//8번 : CallByValue
public class CallByValue {
	public static void main(String[] args) {
		int num = 10;
		System.out.println("main 메소드에서의 num의 값 : " + num);
		modifyNum(num);
		System.out.println("main 메소드에서의 num의 값 : " + num);
		
	}

	static void modifyNum(int num) {
		
		System.out.println("main 메소드에서의 num의 값 : " + num);
		num = 20;
		System.out.println("main 메소드에서의 num의 값 : " + num);
	}
	//값 자체가 복사되므로 메소드 내부에서 변경한 값이 원본에 영향을 끼치지않는다
}

===================================================================================
package method;

//9번 : Call By Reference
public class CallByReference {
   public static void main(String[] args) {
      // java의 기본 참조 타입 복사는 얕은 복사이다

      // 참조값과 call by value
      int[] ar = { 1, 2, 3 };
      System.out.println("메소드 호출 전 : " + ar[0]); // 1
      System.out.println(ar); // [I@3af49f1c
//      modifyArray(ar);
//      System.out.println("메소드 호출 후 : " + ar[0]); //10

      System.out.println("array2 메소드 호출 전 : " + ar[0]); // 1
      System.out.println(ar); // [I@3af49f1c
      modifyArray2(ar);
      System.out.println("array2 메소드 호출 후 : " + ar[0]); // 1
      System.out.println(ar); // [I@3af49f1c

   }

   static void modifyArray(int[] ar) {
      System.out.println(ar); // [I@3af49f1c
      ar[0] = 10; // 참조된 배열의 첫번째 값을 변경
   }
   // 배열의 참조값이 복사되어 전달되므로 메소드 내부에서 배열의 값을 변경하면 원본배열에도 영향을 미친다

   static void modifyArray2(int[] ar) {
      ar = new int[] { 10, 20, 30 };
      System.out.println(ar); // [I@19469ea2
   }
   // 참조값이 복사되어 전달되므로 메소드 내부에서 새로운 객체를 참조하도록 변경하면
   // 원본배열에는 영향을 끼치지 않는다
}

===================================================================================

package classBasic;
//10-1번 : 클래스 - 사용자 정의 타입이다(자료형)
public class Student {
	//필드(속성)
	//이름, 수학점수, 영어점수, 국어점수, 평균점수
	String name;
	int math;
	int eng;
	int kor;
	double avg;
	
	//메소드(행동, 행위, 기능)
	//10-3번 : 연관정 있는 저장공간과 기능을 한곳에 모아 관리할 수 있다
	
	//점수의 총합을 반환하는 메소드
	int getTotal() {
		return math + eng + kor;
	}
}

===================================================================================

package classBasic;

//10-2번 : Student 클래스의 객체를 만들 클래스
public class StudentMain {
   public static void main(String[] args) {
      Student st1 = new Student();
      System.out.println(st1);
      Student st2 = new Student();
      System.out.println(st2);

      // 객체명.필드명 = 값;
      st1.name = "김영선";
//      System.out.println(st1.name);
//      System.out.println(st1.math);
//      System.out.println(st2.name);
//      System.out.println(st2.avg);
      st1.kor = 100;
      st1.eng = 100;
      st1.math = 100;

      // 매개변수 x, 리턴값 o => syso(객체명.메소드명());
      System.out.println(st1.getTotal());
      st1.avg = st1.getTotal() / 3.0;
      System.out.println("평균점수 : " + st1.avg);

      // st2 객체의 국어점수 100점, 영어점수 50점, 수학점수 77점
      // 메소드 호출하여 000님의 평균점수는 소수점한자리까지 출력하기
      st2.name = "짱구";
      st2.kor = 100;
      st2.eng = 50;
      st2.math = 77;
      st2.avg = st2.getTotal() / 3.0;
      System.out.printf("%s님의 평균점수는 %.1f입니다", st2.name, st2.avg);

   }
}

===================================================================================

package classBasic2;
//11번 : Student 클래스 main
public class StudentMain {
   public static void main(String[] args) {
      
      Student st1 = new Student();
      System.out.println(st1); //classBasic2.Student@279f2327

      st1.name = "홍길동";
      st1.age = 17;
      st1.gpa = 4.5;
      
      System.out.println("이름 : " + st1.name);
      System.out.println("나이 : " + st1.age);
      System.out.println("학점 : " + st1.gpa);
      
   }
}

===================================================================================

package classBasic2;
//12번 : 클래스의 특징2(연관성 있는 데이터와 기능을 한 곳에 통합)
public class Rectangle {
   //직사각형 정보와 관련된 기능
   
   //필드
   int width; //너비
   int height; //높이
   
   //메소드
   //넓이를 계산하는 메소드(매개변수 x, 리턴값 o) 정의
   int getArea() {
      return width * height;
   }
   
   //둘레를 계산하는 메소드(매개변수 x, 리턴값 x) 정의
   void getPerimeter() {
      System.out.println((width + height) * 2);
   }

}

===================================================================================

package classBasic2;

//12번 : Rectangle 클래스 main
public class RectangleMain {
   public static void main(String[] args) {

      // 객체화
      // 클래스자료형 객체명 = new 생성자();
      Rectangle r1 = new Rectangle();
      System.out.println(r1); // classBasic2.Rectangle@279f2327

      // 객체명.필드명 = 값;
      r1.height = 20;
      r1.width = 10;

      // 넓이 구하는 메소드 호출(매개변수 x, 리턴값 o => syso(객체명.메소드명()); )
      System.out.println(r1.getArea());

      // 둘레 구하는 메소드 호출(매개변수 x, 리턴값 x => 객체명.메소드명(); )
      r...

===================================================================================

package classBasic2;

//13번 : 클래스의 특징3(객체 생성의 틀)
public class Car {
   // 바퀴, 핸들, 색상, 엔진, 모델명, 제조사, 속도

   // 필드
   String model; // 모델명(제조사)
   String color; // 색상
   int speed; // 속도

   // 메소드
   // 속도를 증가시키는 메소드(매개변수 o, 리턴값 x 메소드 정의 => 객체명.메소드명(인수); )
   void accelerate(int value) {
      speed += value;
      System.out.println("현재 속도 : " + speed);
   }

   // 주행을 멈추는 메소드(매개변수 x, 리턴값 x 메소드 정의 => 객체명.메소드명(); )
   void stop() {
      speed = 0;
   }

   // 속도를 감소시키는 메소드
   // 매개변수 x 리턴값 x
   // 속도는 10씩만 감소되도록 기능 구현
   void decrease() {
      // 조건문 if >= 0
      speed -= 10;
      if (speed < 0) {
         speed = 0;
         System.out.println("주행을 멈췄습니다");
      }

   }

}

===================================================================================

package classBasic2;

//13번 : Car 클래스 main
public class CarMain {
   public static void main(String[] args) {

      // 객체화(인스턴스화)
      Car myCar = new Car();

      myCar.model = "Tesla Model 3";
      myCar.color = "black";
      myCar.speed = 0;

      System.out.println("모델명 : " + myCar.model);
      System.out.println("색상 : " + myCar.color);
      System.out.println("현재 속도 : " + myCar.speed);

      myCar.accelerate(120);

      myCar.accelerate(180);
      System.out.println(myCar.speed);

      myCar.stop();
      System.out.println("현재 속도 : " + myCar.speed);

      myCar.accelerate(20);
      myCar.decrease();
      System.out.println("현재 속도 : " + myCar.speed);

      myCar.decrease();
      System.out.println("현재 속도 : " + myCar.speed);

      myCar.decrease();
      System.out.println("현재 속도 : " + myCar.speed);
   }

}

===================================================================================

package task;
//메소드 문제
public class Task01 {
   //1. 문자열 속의 단어를 공백 기준으로 세기
   //메소드명 : countWord
   //매개변수 : String str
   //ex) I love java   => 3개
   //ex) 안녕하세요 저는 김영선입니다 java 공부 중입니다   => 6개
   
   //2. 주민등록번호로 성별 판단하기
   //메소드명 : getGender
   //1, 3 => 남자
   //2, 4 => 여자

   //3. 학생 3명의 수학점수, 국어점수, 영어점수를 받아 평균을 구하여(정수형)
   //      각 학생별 학점 구하기
   //메소드명 : getGrade
   // 95점 이상 A+
   // 90점 이상 A
   // 85점 이상 B+
   // 80점 이상 B
   // 75점 이상 C+
   // 70점 이상 C
   // 69점 이하 F
   
   
}

===================================================================================

package task;
//메소드 문제
public class Task01 {
   //1. 문자열 속의 단어를 공백 기준으로 세기
   //메소드명 : countWord
   //매개변수 : String str
   //ex) I love java   => 3개
   //ex) 안녕하세요 저는 김영선입니다 java 공부 중입니다   => 6개
   
   //2. 주민등록번호로 성별 판단하기
   //메소드명 : getGender
   //1, 3 => 남자
   //2, 4 => 여자

   //3. 학생 3명의 수학점수, 국어점수, 영어점수를 받아 평균을 구하여(정수형)
   //      각 학생별 학점 구하기
   //메소드명 : getGrade
   // 95점 이상 A+
   // 90점 이상 A
   // 85점 이상 B+
   // 80점 이상 B
   // 75점 이상 C+
   // 70점 이상 C
   // 69점 이하 F
   
   
}

===================================================================================

package task;

public class Task02 {
   public static void main(String[] args) {
      
      //Animal 클래스 => 3개 객체만들기
      
      //필드 : 동물이름, 나이, 종
      //메소드
      // 동물이 먹이를 먹는 메소드   매개변수 1개
      //=> 동물이름이 00을 먹습니다
      
      // 동물이 잠을 잡니다 출력하는 메소드
      // => 동물이름이 잠을 잡니다 출력
      
      // 동물의 생일 축하하는 출력 메소드
      //   => 동물이름의 나이 생일을 축하합니다 출력 
      
      
      
      
   }
}

====================================================================================

package review;

import java.util.Scanner;

public class MethodTask03 {

   // 1. 정수 1개를 받아서 짝수입니다, 홀수입니다를 반환하는 메소드
   // 메소드명 : checkNum

   // 1) 기능
   // 2) 리턴타입 => void
   // 3) 메소드명 => checkNum
   // 4) 매개변수 => 정수형 변수1개
   // 5) 실행할문장 => 삼항연산자
   // 6) return => return 매개변수 % 2 == 0 ? "짝수입니다" : "홀수입니다"
   // 7) 리턴타입 변경 => String
   String checkNum(int number) {
      return number % 2 == 0 ? "짝수입니다" : "홀수입니다";
   }

   // 2. 10칸짜리 정수 배열을 받아 총합을 계산하여 반환하는 메소드
   // 메소드명 : getSum
   // 1) 리턴타입 => void
   // 2) 메소드명 => getSum
   // 3) 매개변수 => int[] 매개변수명
   // 4) 실행할문장(기능 구현) =>
   // 총합구할변수 선언
   // for-each문(자료형 변수명 : 배열명){
   // 총합구할변수 += 변수명;
   // }
   // 5) return 총합구할변수
   // 6) 리턴타입 => int

   int getSum(int[] numbers) {
      int total = 0;
      for (int num : numbers) {
         total += num;
      }
      return total;
   }

   // 3. 문자열을 매개변수로 받아 거꾸로 뒤집어 반환하는 메소드
   // 메소드명 : reverseStr
   // hello => olleh

   // 1) char[]을 이용한 방식
   // 리턴타입 => void
   // 메소드명 => reverseStr1
   // 매개변수 => String 1개
   // 실행할문장 =>
   // 조건식(if문) 매개변수 == null
   // { return; }
   // int 변수1 = 매개변수명.length();
   // 문자형배열 변수2 = new char[변수1];
   // 반복문(for문) int i = 0; i < 변수1; i++
   // { 변수1[i] = 매개변수.charAt(변수1 - 1 - i); }
   // return => 문자열변수

   // 매개변수 o, 리턴값 x 메소드 정의
   String resverseStr1(String str) {
//      if(str == null) {
//         return null;
//      }
      int len = str.length();
      char[] reverse = new char[len];
      String result = "";
      for (int i = 0; i < len; i++) {
         reverse[i] = str.charAt(len - 1 - i);
      }
      return new String(reverse);
   }

   // 2) 뒤에서부터 문자를 하나씩 더해서 새로운 문자열 만드는 방식
   // 리턴타입 => void
   // 메소드명 => reverseStr2
   // 매개변수 => String str
   // 실행할 문장 =>
   // 조건문 if(str == null){ return null; }
   // 문자열 변수 선언
   // 반복문(for문) int i = str.length() -1; i >= 0; i--
   // { 변수 += str.charAt(i); }
   // return => 변수
   // 리턴타입 변경 => String

   String reverseStr2(String str) {
      if (str == null) {
         return null;
      }
      String result = "";
      for (int i = str.length() - 1; i >= 0; i--) {
         result += str.charAt(i);
      }
      return result;
   }

   // 3) char[] 새로 만들어서 앞뒤 바꿔서 복사하는 방식
   // 리턴타입 => void
   // 메소드명 => reverseStr3
   // 매개변수 => String str
   // 실행할 문장(기능구현)
   // 조건문if str ==null {return null;}
   // 정수형 변수1 = str.length();
   // 문자형배열 변수2 = new char[변수1];
   // 반복문for문 int i = 0; i < 변수1; i++
   // { 변수2 = str.charAt(변수1 - 1 - i); }
   // String 변수3 = ""
   // for-each
   // for(char 변수 : 변수2){
   // 변수3 += 변수;
   // }
   // 리턴타입 변수3; String타입으로 변경
   String reverseStr3(String str) {
      if (str == null) {
         return null;
      }

      int len = str.length();
      char[] reverse = new char[len];

      for (int i = 0; i < len; i++) {
         reverse[i] = str.charAt(len - 1 - i);
      }
      String result = "";
      for (char c : reverse) {
         result += c;
      }
      return result;
   }

//   //4) 메소드를 이용하는 방식
   String reverseStr4(String str) {
      return new StringBuilder(str).reverse().toString();
   }

   // 4. 정수형 배열과 찾을 값을 매개변수로 받아서 배열에 존재하면 true 반환하는 메소드
   // 메소드명 : contains
   // 배열 요소 중에 10이라는 값을 반드시 넣고 10을 매개변수로 전달
   // syso(메소드명(배열명, 10)) => true

   // 리턴타입 => void -> boolean
   // 메소드명 => contains
   // 매개변수 => 정수형배열 1개, 정수형변수 1개
   // 구현부{
   // if(매개변수1 == null){
   // return false; }
   // for(정수형 변수 : 배열명){
   // 조건문(if문) 변수 == 정수형변수 {
   // return true;
   // }
   // }
   // return false;
   // }

   boolean contains(int[] arr, int num) {
      if (arr == null) {
         return false;
      }
      for (int i : arr) {
         if (i == num) {
            return true;
         }
      }
      return false;
   }

   // 7. 아이디와 비밀번호를 매개변수로 받아 검증, 시도횟수 3회 넘기면 잠금 반환
   // loginTry
   // 리턴타입 => void => String
   // 메소드명 => loginTry
   // 매개변수 => 문자열 2개
   // 구현부 =>
   // 고정값 id, pw 선언(상수)
   // 횟수 확인할 변수1 선언
   // if문 변수1 >= 3
   // return 계정잠금
   // if문 상수id.equals(매개변수id) && 상수pw.equals(매개변수pw)
   // 변수1 초기화
   // return 로그인 성공
   // else{
   // 변수1++
   // if(변수1 >= 3){
   // return 계정잠금}
   // return 로그인실패
   // }
   // }}

   // 메소드 밖에서 클래스 안에 변수 선언
//   int tryCount = 0;
//   
//   String loginTry(String inputId, String inputPw) {
//      final String ID = "admin";
//      final String PW = "1234";
//      System.out.println(tryCount + "번");
//      if(tryCount >= 3) {
//         return "계정잠금";
//      }
//      if(ID.equals(inputId) && PW.equals(inputPw)) {
//         tryCount = 0;
//         return "로그인 성공";
//      }else {
//         if(tryCount >= 3) {
//            return "계정잠금";
//         }
//         tryCount++;
//         System.out.println(tryCount);
//         return "로그인실패";
//      }
//   }

   // loginTry(검증만)
   String loginTry1(String inputId, String inputPw) {
      final String ID = "admin";
      final String PW = "admin";

      if (ID.equals(inputId) && PW.equals(inputPw)) {
         return "로그인성공";
      }
      return "로그인 실패";
   }

   public static void main(String[] args) {
      MethodTask02 mt = new MethodTask02();

      System.out.println("----------1번---------");
      // 매개변수 o, 리턴값 o => syso(객체명.메소드명(인수));
//      System.out.println(mt.checkNum(10));
//      System.out.println(mt.checkNum(-7));

      System.out.println("----------2번---------");
      // 매개변수 o, 리턴값 o => syso(객체명.메소드명(인수));

//      System.out.println(mt.getSum(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));
//      int[] numbers = {10, 20, 10, 20, 10, 20, 10, 20, 10, 20};
//      System.out.println(mt.getSum(numbers));

      System.out.println("----------3번-1---------");
//      System.out.println(mt.resverseStr1(null));
//      System.out.println(mt.reverseStr4("철수"));

      System.out.println("----------4번----------");
      int[] ar = { 1, 2, 3, 10 };
      System.out.println(mt.contains(null, 0));
      System.out.println(mt.contains(ar, 10));

      System.out.println("----------7번----------");
//      System.out.println(mt.loginTry("admin", "1234"));
//      System.out.println(mt.loginTry("admin", "12345")); //1회실패
//      System.out.println(mt.loginTry("admin", "12345")); //2회실패
//      System.out.println(mt.loginTry("admin", "12345")); //3회실패=>잠금
//      System.out.println(mt.loginTry("admin", "12345")); //3회실패=>잠금

      int tryCount = 0;
      String id, passwd, result;
      Scanner sc = new Scanner(System.in);

      while (true) {
         System.out.println("아이디 입력 : ");
         id = sc.nextLine();
         System.out.println("비밀번호 입력 : ");
         passwd = sc.nextLine();

         result = mt.loginTry1(id, passwd);

         if (result.equals("로그인 성공")) {
            System.out.println("로그인 성공");
            break;
         } else {
            tryCount++;
            if (tryCount >= 3) {
               System.out.println("3회 이상 실패로 계정 잠금");
               break;
            }
            System.out.println("로그인 실패");
         }
      }
      sc.close();

   }

   // 5. 단수를 매개변수로 받아 해당 단의 구구단을(1 ~ 19)을 출력하는 메소드
   // 메소드명 : printGugudan
   // 3 x 1 = 3
   // ...
   // 3 x 19 = _

   // 6. 두개의 문자열을 입력받아서 두 문자열의 길이가 같으면 같음, 다르면 다름 반환하는 메소드
   // 메소드명 : compareLength

}














